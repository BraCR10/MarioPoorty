/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package poo.mariopoorty.screens;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.*;
import poo.mariopoorty.minigames.MemoryPath;



/**
 *
 * @author Brian Ramirez
 */
public class MemoryPathScreen extends javax.swing.JFrame {

    JLabel[][] cellsLabels = new JLabel[6][3];
    boolean[][] seletedCells;
    private final ImageIcon misteryBox;
    private final ImageIcon misteryBoxDimmed;
    private final ImageIcon targetImage;
    private  ImageIcon characterImage;
    JLabel character;
    
    /**
     * Creates new form MemoryPathScreen
     */
    public MemoryPathScreen() {
        initComponents();
        this.setSize(1250, 650);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
        this.setLayout(new BorderLayout());

        this.jpExit.setPreferredSize(new Dimension(100, this.getHeight())); 
        this.jpTarget.setPreferredSize(new Dimension(50, this.getHeight())); 
        
        misteryBox = loadImage("/Spaces/misteryBox.jpg",150,150);
        misteryBoxDimmed = loadImage("/Spaces/misteryBoxDimmed.jpg",150,150);
        targetImage = loadImage("/Spaces/target.jpg",jpTarget.getWidth(),jpTarget.getHeight());
        characterImage=loadImage("/Spaces/finish.png",60,60);
        
       
        putCells();
        putTarget();
        putExit();
        
        
        this.add(this.jpExit, BorderLayout.WEST); // Add jpExit to the west
        this.add(this.jpPlayGround, BorderLayout.CENTER); // Add jpPlayGround to the center
        this.add(this.jpTarget, BorderLayout.EAST); // Add jpTarget to the east

        this.setLocationRelativeTo(null); 
        this.setResizable(false);
        

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpPlayGround = new javax.swing.JPanel();
        jpExit = new javax.swing.JPanel();
        jpTarget = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpPlayGround.setBackground(new java.awt.Color(0, 102, 153));

        javax.swing.GroupLayout jpPlayGroundLayout = new javax.swing.GroupLayout(jpPlayGround);
        jpPlayGround.setLayout(jpPlayGroundLayout);
        jpPlayGroundLayout.setHorizontalGroup(
            jpPlayGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 468, Short.MAX_VALUE)
        );
        jpPlayGroundLayout.setVerticalGroup(
            jpPlayGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1960, Short.MAX_VALUE)
        );

        jpExit.setBackground(new java.awt.Color(255, 0, 51));
        jpExit.setBorder(javax.swing.BorderFactory.createMatteBorder(3, 3, 3, 3, new java.awt.Color(204, 255, 0)));

        javax.swing.GroupLayout jpExitLayout = new javax.swing.GroupLayout(jpExit);
        jpExit.setLayout(jpExitLayout);
        jpExitLayout.setHorizontalGroup(
            jpExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 96, Short.MAX_VALUE)
        );
        jpExitLayout.setVerticalGroup(
            jpExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1954, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jpTargetLayout = new javax.swing.GroupLayout(jpTarget);
        jpTarget.setLayout(jpTargetLayout);
        jpTargetLayout.setHorizontalGroup(
            jpTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 245, Short.MAX_VALUE)
        );
        jpTargetLayout.setVerticalGroup(
            jpTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 676, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jpExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(jpPlayGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jpTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jpPlayGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jpExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jpTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


private void putCells() {
    this.jpPlayGround.setLayout(new GridLayout(3, 6)); 
    
    for (int j = 0; j < 3; j++) { 
        for (int i = 0; i < 6; i++) {
            
            this.cellsLabels[i][j] = new JLabel(misteryBox);
            this.cellsLabels[i][j].setVisible(true);
            this.cellsLabels[i][j].addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent evt) {
                cellMouseClicked(evt);}}
            );
            this.cellsLabels[i][j].addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseEntered(MouseEvent evt) {
                cellMouseEntered(evt);
            } }
            );
            this.cellsLabels[i][j].addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseExited(MouseEvent evt) {
                cellMouseExited(evt);
            } }
            );
            this.jpPlayGround.add(cellsLabels[i][j]);
        }
    }
    
    jpPlayGround.revalidate(); 
    jpPlayGround.repaint(); 
}

private void putTarget() {
    this.jpTarget.setLayout(null); 
    JLabel targetLabel = new JLabel(this.targetImage);
    targetLabel.setBounds(0, 0, jpTarget.getWidth(), jpTarget.getHeight()); 
    jpTarget.add(targetLabel); 
    this.jpTarget.revalidate(); 
    this.jpTarget.repaint(); 
}

private void putExit() {
    // Set null layout to allow manual positioning
    this.jpExit.setLayout(null);

    // Create and add character JLabel
    character = new JLabel(characterImage);
    jpExit.add(character);

    // Calculate center position
    int x = (this.jpExit.getWidth() - character.getPreferredSize().width) / 2;
    int y = (this.jpExit.getHeight()) / 3;

    // Set JLabel position and size
    character.setBounds(x, y, character.getPreferredSize().width, character.getPreferredSize().height);

    // Refresh panel display
    this.jpExit.revalidate();
    this.jpExit.repaint();
}

private void cellMouseClicked(MouseEvent evt) { 
    for (int i = 0; i < 6; i++) {
        for (int j = 0; j < 3; j++) {
            if (evt.getSource().equals(cellsLabels[i][j])) {
                jpPlayGround.setLayout(null);
                jpExit.setLayout(null);
                
               if (character.getParent() == jpExit)jpExit.remove(character);

               jpPlayGround.add(character);
               MemoryPath.moveCharacter(cellsLabels[i][j], character);
               jpPlayGround.revalidate();
               jpPlayGround.repaint();
               jpExit.revalidate();
               jpExit.repaint();
               jpPlayGround.setComponentZOrder(character, 0);
            }
        }
    }
}

public void setSeletedCells(boolean[][] seletedCells) {
        this.seletedCells = seletedCells;
    }

private void cellMouseEntered(java.awt.event.MouseEvent evt) { 
        if( ((JLabel) evt.getSource()).getIcon()!=null){

            ((JLabel) evt.getSource()).setIcon(this.misteryBoxDimmed);
        }
    } 

private void cellMouseExited(java.awt.event.MouseEvent evt) { 
        if( ((JLabel) evt.getSource()).getIcon()!=null){

            ((JLabel) evt.getSource()).setIcon(this.misteryBox);
        }
    } 
      
private  ImageIcon loadImage(String path, int width, int height ) {
    ImageIcon originalIcon = new ImageIcon(getClass().getResource(path));
    Image originalImage = originalIcon.getImage();
    Image resizedImage = originalImage.getScaledInstance(width, height, Image.SCALE_SMOOTH);
    return new ImageIcon(resizedImage);
}
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jpExit;
    private javax.swing.JPanel jpPlayGround;
    private javax.swing.JPanel jpTarget;
    // End of variables declaration//GEN-END:variables
}
