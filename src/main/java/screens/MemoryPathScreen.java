package screens;

import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import javax.swing.*;
import javax.swing.border.Border;
import minigames.LoadImage;
import minigames.MemoryPath;
import threads.ThreadCellVerifierMemoryPath;
import threads.ThreadCharacterMemoryPathMovement;




/**
 *
 * @author Brian Ramirez
 */
public class MemoryPathScreen extends JFrame implements IScreenMethods{

    private static final int ROWS = 6;
    private static final int COLS = 3;


    private JLabel[][] cellsLabels = new JLabel[ROWS][COLS];
    private  ImageIcon mysteryBox, mysteryBoxDimmed, mysteryBoxNotAllowed, mysteryBoxIncorrect, targetImage, characterImage;
    private static final String RESOURCEPATH = "/MemoryPathGame/";

    private JLabel character;
    private int currentRow = -1;
    private final MemoryPath settings;
    private  boolean  isArrivedFlag;

    /**
     * Creates new form MemoryPathScreen
     * @param memoryPathSettings
     */
    public MemoryPathScreen(MemoryPath memoryPathSettings) {
        initComponents();
        setTitle("Memory Path");
        this.setSize(1250, 650);
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        this.setLayout(new BorderLayout());

        this.jpExit.setPreferredSize(new Dimension(100, this.getHeight()));
        this.jpTarget.setPreferredSize(new Dimension(100, this.getHeight()));

        loadImages();
        character = new JLabel(characterImage);
        this.isArrivedFlag=false;
        this.settings=memoryPathSettings;

        initPlayGround();
        putTarget();
        defaultSettings();

        this.add(this.jpExit, BorderLayout.WEST);
        this.add(this.jpPlayGround, BorderLayout.CENTER);
        this.add(this.jpTarget, BorderLayout.EAST);

        this.setLocationRelativeTo(null);
        this.setResizable(false);

    }

    @Override
    public void loadImages() {
        mysteryBox = LoadImage.loadImageAdjusted(RESOURCEPATH+"misteryBox.jpg",150,150);
        mysteryBoxDimmed = LoadImage.loadImageAdjusted(RESOURCEPATH+"misteryBoxDimmed.jpg",150,150);
        mysteryBoxIncorrect = LoadImage.loadImageAdjusted(RESOURCEPATH+"misteryBoxNotAllowed.jpg",150,150);
        mysteryBoxNotAllowed = LoadImage.loadImageAdjusted(RESOURCEPATH+"misteryBoxIncorrect.jpg",150,150);
        targetImage = LoadImage.loadImageAdjusted(RESOURCEPATH+"target.jpg",jpTarget.getWidth(),jpTarget.getHeight());
        characterImage=LoadImage.loadImageAdjusted(RESOURCEPATH+"character.png",60,60);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jpPlayGround = new javax.swing.JPanel();
        jpExit = new javax.swing.JPanel();
        jtAttempts = new javax.swing.JTextField();
        jpTarget = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jpPlayGround.setBackground(new java.awt.Color(0, 102, 153));

        javax.swing.GroupLayout jpPlayGroundLayout = new javax.swing.GroupLayout(jpPlayGround);
        jpPlayGround.setLayout(jpPlayGroundLayout);
        jpPlayGroundLayout.setHorizontalGroup(
                jpPlayGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 468, Short.MAX_VALUE)
        );
        jpPlayGroundLayout.setVerticalGroup(
                jpPlayGroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 1960, Short.MAX_VALUE)
        );

        jpExit.setBackground(new java.awt.Color(204, 0, 102));
        jpExit.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 0, 51)));

        jtAttempts.setBackground(new java.awt.Color(0, 0, 0));
        jtAttempts.setForeground(new java.awt.Color(255, 255, 255));
        jtAttempts.setText("  Attemps: 3");
        jtAttempts.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtAttempts.setSelectedTextColor(new java.awt.Color(0, 0, 0));


        javax.swing.GroupLayout jpExitLayout = new javax.swing.GroupLayout(jpExit);
        jpExit.setLayout(jpExitLayout);
        jpExitLayout.setHorizontalGroup(
                jpExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jpExitLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jtAttempts, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(41, Short.MAX_VALUE))
        );
        jpExitLayout.setVerticalGroup(
                jpExitLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jpExitLayout.createSequentialGroup()
                                .addGap(54, 54, 54)
                                .addComponent(jtAttempts, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jtAttempts.setEditable(false);

        javax.swing.GroupLayout jpTargetLayout = new javax.swing.GroupLayout(jpTarget);
        jpTarget.setLayout(jpTargetLayout);
        jpTargetLayout.setHorizontalGroup(
                jpTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 245, Short.MAX_VALUE)
        );
        jpTargetLayout.setVerticalGroup(
                jpTargetLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGap(0, 676, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addComponent(jpExit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(65, 65, 65)
                                .addComponent(jpPlayGround, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jpTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jpPlayGround, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jpExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jpTarget, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(0, 0, Short.MAX_VALUE)))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    public void Win(){
        this.settings.players.get(0).Condition = "Roll";
    }


    @Override
    public void initPlayGround() {
        this.jpPlayGround.setLayout(new GridLayout(COLS, ROWS));

        Border leftRightBorder = BorderFactory.createMatteBorder(0, 5, 0, 1, Color.red);

        for (int j = 0; j < COLS; j++) {
            for (int i = 0; i < ROWS; i++) {
                this.cellsLabels[i][j] = new JLabel(mysteryBox);
                this.cellsLabels[i][j].setVisible(true);
                this.cellsLabels[i][j].setBorder(leftRightBorder);

                this.cellsLabels[i][j].addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent evt) {
                        cellMouseClicked(evt);
                    }

                    @Override
                    public void mouseEntered(MouseEvent evt) {
                        cellMouseEntered(evt);
                    }

                    @Override
                    public void mouseExited(MouseEvent evt) {
                        cellMouseExited(evt);
                    }
                });
                this.currentRow=-1;
                this.jpPlayGround.add(cellsLabels[i][j]);
            }
        }

        jpPlayGround.revalidate();
        jpPlayGround.repaint();
    }

    private void putTarget() {
        this.jpTarget.setLayout(null);
        JLabel targetLabel = new JLabel(this.targetImage);
        targetLabel.setBounds(0, 0, jpTarget.getWidth(), jpTarget.getHeight());
        jpTarget.add(targetLabel);
        this.jpTarget.revalidate();
        this.jpTarget.repaint();
    }

    public void defaultSettings(){
        putCharacter(jpExit, (this.jpExit.getWidth() - character.getPreferredSize().width) / 2,(this.jpExit.getHeight()) / 3);

        //To put images again
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                this.getCellsLabels()[i][j].setIcon(this.getMysteryBox());
            }
        }

        this.setCurrentRow(-1);
    }

    public void putCharacter(JPanel jp, int x, int y){
        jp.setLayout(null);
        jp.add(character);
        this.character.setBounds(x, y, character.getPreferredSize().width, character.getPreferredSize().height);
        jp.revalidate();
        jp.repaint();

    }

    private void cellMouseClicked(MouseEvent evt) {
        for (int i = 0; i < ROWS; i++) {
            for (int j = 0; j < COLS; j++) {
                if (evt.getSource().equals(cellsLabels[i][j])
                        && currentRow+1==i) {

                    jpPlayGround.setLayout(null);
                    jpExit.setLayout(null);

                    if (character.getParent() == jpExit)jpExit.remove(character);
                    jpPlayGround.add(character);

                    moveCharacter(cellsLabels[i][j],settings.getMatrizPathSelected()[i][j]);
                    jpPlayGround.revalidate();
                    jpPlayGround.repaint();
                    jpExit.revalidate();
                    jpExit.repaint();
                    jpPlayGround.setComponentZOrder(character, 0);
                    currentRow++;

                }
            }
        }
    }

    private void cellMouseEntered(java.awt.event.MouseEvent evt) {
        if( ((JLabel) evt.getSource()).getIcon()!=null ){
            for (int i = 0; i < ROWS; i++) {
                for (int j = 0; j < COLS; j++){
                    if(cellsLabels[i][j].equals(((JLabel) evt.getSource()))){
                        if(i-1==currentRow)
                            ((JLabel) evt.getSource()).setIcon(this.mysteryBoxDimmed);
                        else
                            ((JLabel) evt.getSource()).setIcon(this.mysteryBoxNotAllowed);
                    }
                }
            }

        }
    }

    private void cellMouseExited(java.awt.event.MouseEvent evt) {
        if( ((JLabel) evt.getSource()).getIcon()!=null){

            ((JLabel) evt.getSource()).setIcon(this.mysteryBox);
        }
    }






    public JLabel[][] getCellsLabels() {
        return cellsLabels;
    }

    public void setCellsLabels(JLabel[][] cellsLabels) {
        this.cellsLabels = cellsLabels;
    }

    public JLabel getCharacter() {
        return character;
    }

    public void setCharacter(JLabel character) {
        this.character = character;
    }

    public int getCurrentRow() {
        return currentRow;
    }

    public void setCurrentRow(int currentRow) {
        this.currentRow = currentRow;
    }

    public JPanel getJpExit() {
        return jpExit;
    }

    public void setJpExit(JPanel jpExit) {
        this.jpExit = jpExit;
    }

    public JPanel getJpPlayGround() {
        return jpPlayGround;
    }

    public void setJpPlayGround(JPanel jpPlayGround) {
        this.jpPlayGround = jpPlayGround;
    }

    public JPanel getJpTarget() {
        return jpTarget;
    }

    public void setJpTarget(JPanel jpTarget) {
        this.jpTarget = jpTarget;
    }

    public ImageIcon getMysteryBox() {
        return mysteryBox;
    }

    public JTextField getJtAttempts() {
        return jtAttempts;
    }

    public ImageIcon getMysteryBoxNotAllowed() {
        return mysteryBoxNotAllowed;
    }

    public ImageIcon getMysteryBoxIncorrect() {
        return mysteryBoxIncorrect;
    }

    public void setIsArrivedFlag(boolean isArrivedFlag) {
        this.isArrivedFlag = isArrivedFlag;
    }

    public boolean isIsArrivedFlag() {
        return isArrivedFlag;
    }


    public  void moveCharacter(JLabel cell, boolean cellSelectedState) {
        int centerX = cell.getX() + (cell.getWidth() - character.getPreferredSize().width) / 2;
        int centerY = cell.getY() + (cell.getHeight() - character.getPreferredSize().height) / 2;

        Thread thread = new ThreadCharacterMemoryPathMovement(this, centerX, centerY);
        thread.start();
        thread = new ThreadCellVerifierMemoryPath(cellSelectedState,this,cell,settings);
        thread.start();

    }


    // Variables declaration - do not modify
    private javax.swing.JPanel jpExit;
    private javax.swing.JPanel jpPlayGround;
    private javax.swing.JPanel jpTarget;
    private javax.swing.JTextField jtAttempts;
    // End of variables declaration
}
